<?php

namespace Kvik\AdminBundle\Repository;

use Kvik\AdminBundle\Entity\Term;
use Kvik\AdminBundle\Entity\User;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
    public function findPosts($params, $type){

        $qb = $this->createQueryBuilder('p')
            ->where('p.postType = :type')
            ->setParameter('type', $type)
            ->orderBy('p.dateEdit', 'DESC')
            ->setMaxResults( 10 );
        ;

        //status
        if ( isset($params['status']) ) {
            $qb
                ->andWhere('p.postStatus = :status')
                ->setParameter('status', $params['status'])
            ;
        }
        //cat
        if ( isset($params['cat']) ) {
            $params['cat'] = $this->_em->getRepository(Term::class)->findOneBy([
                'slug' => $params['cat']
            ])->getId();
            $qb
                ->join('p.terms', 't')
                ->andWhere('t.id = :cat')
                ->setParameter('cat', $params['cat'])
            ;
        }
        //tag
        if ( isset($params['tag']) ) {
            $params['tag'] = $this->_em->getRepository(Term::class)->findOneBy([
                'slug' => $params['tag']
            ])->getId();
            $qb
                ->join('p.terms', 't')
                ->andWhere('t.id = :tag')
                ->setParameter('cat', $params['tag'])
            ;
        }
        //author
        if ( isset($params['author']) ) {
            $params['author'] = $this->_em->getRepository(User::class)->findOneBy([
                'username' => $params['author']
            ])->getId();
            $qb
                ->join('p.author', 'a')
                ->andWhere('a.id = :author')
                ->setParameter('author', $params['author'])
            ;
        }
        return $qb;
    }

    public function getTotalPosts(array $params, $type){
        return $this->findPosts($params, $type)
            ->select('count(p.id)')
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }

    public function getPosts(array $params, $type){
        $offset = !is_null($params['pge']) ? ($params['pge'] - 1)*20 : 0;
        return $this->findPosts($params, $type)
            ->setFirstResult( $offset )
            ->setMaxResults(20)
        ;
    }

}
